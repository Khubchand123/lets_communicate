{"ast":null,"code":"var _jsxFileName = \"C:\\\\lets_communicate\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport NoteContext from './noteContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://localhost:5000\";\n  const notesInitial = [];\n  const [notes, setNotes] = useState(notesInitial);\n  const topicsInitial = [];\n  const [topics, setTopics] = useState(topicsInitial);\n  // getAllNotes\n  const getNotes = async () => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": `${localStorage.getItem('token')}`\n      }\n    });\n    const json = await response.json();\n    // console.log(json)\n    setNotes(json);\n  };\n  /// Add a Note\n  const addNote = async (title, description, tag) => {\n    // TODO: API Call\n    // API Call\n    const response = await fetch(`${host}/api/notes/addnote`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = await response.json();\n    setNotes(notes.concat(json));\n  };\n\n  // Delete a Note\n  const deleteNote = async id => {\n    // TODO: API Call\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      }\n    });\n    const json = response.json();\n    // console.log(json);\n    // console.log(\"Deleting the note with id\" + id);\n    const newNotes = notes.filter(note => {\n      return note._id !== id;\n    });\n    setNotes(newNotes);\n  };\n  // Edit a Note\n  const editNote = async (id, title, description, tag) => {\n    // API Call \n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        \"auth-token\": localStorage.getItem('token')\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    const json = response.json();\n\n    // Logic to edit in client\n    for (let index = 0; index < notes.length; index++) {\n      const element = notes[index];\n      if (element._id === id) {\n        element.title = title;\n        element.description = description;\n        element.tag = tag;\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(NoteContext.Provider, {\n    value: {\n      notes,\n      topics,\n      addNote,\n      deleteNote,\n      editNote,\n      getNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"uaZp2EvOeTXD16gSN1nO0k968AY=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["React","useState","NoteContext","jsxDEV","_jsxDEV","NoteState","props","_s","host","notesInitial","notes","setNotes","topicsInitial","topics","setTopics","getNotes","response","fetch","method","headers","localStorage","getItem","json","addNote","title","description","tag","body","JSON","stringify","concat","deleteNote","id","newNotes","filter","note","_id","editNote","index","length","element","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/lets_communicate/src/context/notes/NoteState.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport NoteContext from './noteContext'\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://localhost:5000\"\r\n  const notesInitial = []\r\n  const [notes, setNotes] = useState(notesInitial)\r\n  const topicsInitial = []\r\n  const [topics, setTopics] = useState(topicsInitial)\r\n  // getAllNotes\r\n  const getNotes = async () => {\r\n    // API Call \r\n    const response = await fetch(`${host}/api/notes/fetchnotes`, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"auth-token\": `${localStorage.getItem('token')}`\r\n      }\r\n    });\r\n    const json = await response.json()\r\n    // console.log(json)\r\n    setNotes(json)\r\n  }\r\n  /// Add a Note\r\n  const addNote = async (title, description, tag) => {\r\n    // TODO: API Call\r\n    // API Call\r\n      const response = await fetch(`${host}/api/notes/addnote`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          \"auth-token\": localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify({ title, description, tag })\r\n      });\r\n    const json = await response.json();\r\n    setNotes(notes.concat(json))\r\n  }\r\n\r\n  // Delete a Note\r\n  const deleteNote = async (id) => {\r\n    // TODO: API Call\r\n    const response = await fetch(`${host}/api/notes/deletenote/${id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"auth-token\": localStorage.getItem('token')\r\n      },\r\n    });\r\n    const json = response.json();\r\n    // console.log(json);\r\n    // console.log(\"Deleting the note with id\" + id);\r\n    const newNotes = notes.filter((note) => { return note._id !== id })\r\n    setNotes(newNotes)\r\n  }\r\n  // Edit a Note\r\n  const editNote = async (id, title, description, tag) => {\r\n    // API Call \r\n    const response = await fetch(`${host}/api/notes/updatenote/${id}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        \"auth-token\": localStorage.getItem('token')\r\n      },\r\n      body: JSON.stringify({ title, description, tag })\r\n    });\r\n    const json = response.json();\r\n\r\n    // Logic to edit in client\r\n    for (let index = 0; index < notes.length; index++) {\r\n      const element = notes[index];\r\n      if (element._id === id) {\r\n        element.title = title;\r\n        element.description = description;\r\n        element.tag = tag;\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <NoteContext.Provider value={{ notes,topics, addNote, deleteNote, editNote, getNotes, }}>\r\n      {props.children}\r\n    </NoteContext.Provider>\r\n  )\r\n\r\n}\r\n\r\nexport default NoteState;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}